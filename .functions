#!/bin/bash

tit() { printf "\n $(tput bold)$1$(tput sgr0)\n\n"; }
success() { printf " $(tput setaf 8)›  $(tput setaf 10)✓\t$(tput sgr0)$1\n"; }
info() { printf " $(tput setaf 8)›  $(tput setaf 12)…\t$(tput sgr0)$1\n"; }
cmd() { printf " $(tput setaf 8)›  $(tput setaf 14)↘️\t$(tput bold)$(tput setaf 8)$1$(tput sgr0)\n"; }

# Start an HTTP server from a directory, optionally specifying the port
function server() {
    local port="${1:-8000}"
    open "http://localhost:${port}/"

    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
    # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
    python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

function gifify() {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize -resize 600x600\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
      rm out-static*.png
    else
      ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
    fi
  else
    echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

function movToMp4() {
  ffmpeg -i "$1" -vcodec copy -acodec copy "$2"
}

function port() {
  ps -o pid,command -p $(lsof -i:$1 -t)
}

function pcat() {
  cat $1 | pygmentize
}

function pngToBase64() {
  local prefix="url('data:image/png;base64,"
  local encoded=$(openssl base64 -in $1 | tr -d '\n')
  local suffix="')"

  echo $prefix$encoded$suffix
}

function startNvm() {
  tit "Start nvm"

  which nvm > /dev/null
  if [ $? -eq 0 ]; then
    success "nvm already started"
    return;
  fi

  info "Starting nvm"

  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

  success "nvm started"

  info "Switching to lts/carbon"
  cmd "nvm use lts/carbon"
  nvm use lts/carbon
}

function startRbenv() {
  which rbenv > /dev/null

  if [ $? -eq 0 ]; then
    success "rbenv already started"
    return;
  fi

  info "Starting rbenv"

  rbenv init -

  success "rbenv started"
}

DIR=$(dirname "$(readlink -n $0)")
function tern() {
  if [ -e .tern-project ]; then
    info "Tern project file already exists"
  else
    cp $DIR/lib/.tern-project-template .tern-project
    success ".tern-project template copied"
  fi
}
